module tb_ALU_32bit;

    reg [31:0] A;       // 32-bit input A
    reg [31:0] B;       // 32-bit input B
    reg [2:0] ALU_Sel;  // 3-bit control signal to select the operation
    wire [31:0] ALU_Out; // 32-bit output
    wire Zero;          // Zero flag

    // Instantiate the ALU
    ALU_32bit uut (
        .A(A),
        .B(B),
        .ALU_Sel(ALU_Sel),
        .ALU_Out(ALU_Out),
        .Zero(Zero)
    );

    initial begin
        // Initialize inputs
        A = 32'h00000000;
        B = 32'h00000000;
        ALU_Sel = 3'b000;

        // Test addition
        #10 A = 32'h00000001; B = 32'h00000001; ALU_Sel = 3'b000;
        #10 $display("A=%h, B=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, B, ALU_Sel, ALU_Out, Zero);

        // Test subtraction
        #10 A = 32'h00000002; B = 32'h00000001; ALU_Sel = 3'b001;
        #10 $display("A=%h, B=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, B, ALU_Sel, ALU_Out, Zero);

        // Test AND
        #10 A = 32'hFFFFFFF0; B = 32'h0000000F; ALU_Sel = 3'b010;
        #10 $display("A=%h, B=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, B, ALU_Sel, ALU_Out, Zero);

        // Test OR
        #10 A = 32'h0F0F0F0F; B = 32'hF0F0F0F0; ALU_Sel = 3'b011;
        #10 $display("A=%h, B=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, B, ALU_Sel, ALU_Out, Zero);

        // Test XOR
        #10 A = 32'hAAAAAAAA; B = 32'h55555555; ALU_Sel = 3'b100;
        #10 $display("A=%h, B=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, B, ALU_Sel, ALU_Out, Zero);

        // Test NOR
        #10 A = 32'h00000000; B = 32'hFFFFFFFF; ALU_Sel = 3'b101;
        #10 $display("A=%h, B=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, B, ALU_Sel, ALU_Out, Zero);

        // Test shift left
        #10 A = 32'h00000001; ALU_Sel = 3'b110;
        #10 $display("A=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, ALU_Sel, ALU_Out, Zero);

        // Test shift right
        #10 A = 32'h00000002; ALU_Sel = 3'b111;
        #10 $display("A=%h, ALU_Sel=%b, ALU_Out=%h, Zero=%b", A, ALU_Sel, ALU_Out, Zero);

        // End simulation
        #10 $finish;
    end

endmodule
