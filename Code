module ALU (
    input  [31:0] A,      // First operand
    input  [31:0] B,      // Second operand
    input  [2:0]  ALUOp,  // Operation select
    output reg [31:0] Result,  // Result of the operation
    output reg Zero          // Zero flag
);

    always @(*) begin
        case (ALUOp)
            3'b000: Result = A + B;    // Addition
            3'b001: Result = A - B;    // Subtraction
            3'b010: Result = A * B;    // Multiplication
            3'b011: Result = A / B;    // Division
            3'b100: Result = A & B;    // AND
            3'b101: Result = A | B;    // OR
            3'b110: Result = A ^ B;    // XOR
            3'b111: Result = ~A;       // NOT (unary, ignore B)
            default: Result = 32'h00000000; // Default case (shouldn't happen)
        endcase

        // Set the Zero flag if the result is zero
        if (Result == 32'h00000000)
            Zero = 1'b1;
        else
            Zero = 1'b0;
    end

endmodule
